import { Client, Events, GatewayIntentBits, EmbedBuilder } from "discord.js";
import { mongoose } from "mongoose";
import URLModel from "./model.js";
import { nanoid } from "nanoid";

import express from "express";
import dotenv from "dotenv";
dotenv.config();

// connection to MongoDB
mongoose
  .connect("mongodb://127.0.0.1:27017/shortURL")
  .then(() => {
    console.log("Connected to MongoDB");
  })
  .catch((e) => {
    console.log("Error connecting to MongoDB", e);
  });

// express setup
const app = express();
const PORT = 8000;

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

client.on("messageCreate", (message) => {
  if (message.author.bot) return; // Ignore bot messages

  if (message.content.startsWith("create")) {
    const url = message.content.split("create")[1];
    return message.reply({
      content: `Generating Short ID for: ${url}`,
    });
  }

  message.reply({ content: "Hi from Bot! - :)" });
});

client.on("interactionCreate", async (interaction) => {
  if (interaction.commandName === "ping") {
    interaction.reply("Pong!");
  }
  if (interaction.commandName === "shorten") {
    const url = interaction.options.getString("url");
    const shortID = nanoid(8);
    console.log(shortID);
    const shortURL = `http://localhost:8000/${shortID}`;
    const result = await URLModel.create({
      originalURl: url,
      shortID: shortID,
      shortURL: shortURL,
    });

    const embed = new EmbedBuilder()
      .setTitle("ðŸ”— Shortened URL")
      .addFields(
        { name: "Original URL", value: url },
        { name: "Shortened", value: shortURL }
      )
      .setColor("#908db9")
      .setFooter({ text: "Generated by Kaushal_Bot00" })
      .setAuthor({
        name: interaction.user.username,
        iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
      });

    interaction.reply({ embeds: [embed] });

    // interaction.reply(`Shortened URL: ${shortURL}`);
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

app.get("/", (req, res) => {
  return res.send("Hello from Express!");
});

app.get("/:shortID", async (req, res) => {
  const shortID = req.params.shortID;
  const url = await URLModel.findOne({ shortID: shortID });
  if (!url) return res.status(404).send("URL not found");
  return res.redirect(url.originalURl);
});

client.login(process.env.DISCORD_TOKEN);
