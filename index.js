import { Client, Events, GatewayIntentBits, EmbedBuilder } from "discord.js";
import { mongoose } from "mongoose";
import URLModel from "./model.js";
import { nanoid } from "nanoid";
import { GoogleGenAI } from "@google/genai";

import express from "express";
import dotenv from "dotenv";
dotenv.config();

// connection to MongoDB
mongoose
  .connect("mongodb://127.0.0.1:27017/shortURL")
  .then(() => {
    console.log("Connected to MongoDB");
  })
  .catch((e) => {
    console.log("Error connecting to MongoDB", e);
  });

// express setup
const app = express();
const PORT = 8000;

// Gemini api
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });

const client1 = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

const client2 = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

client1.on("messageCreate", (message) => {
  if (message.author.bot) return; // Ignore bot messages

  if (message.content.startsWith("create")) {
    const url = message.content.split("create")[1];
    return message.reply({
      content: `Generating Short ID for: ${url}`,
    });
  }

  message.reply({ content: "Hi from Bot! - :)" });
});

client1.on("interactionCreate", async (interaction) => {
  if (interaction.commandName === "ping") {
    interaction.reply("Pong!");
  }
  if (interaction.commandName === "shorten") {
    const url = interaction.options.getString("url");
    const shortID = nanoid(8);
    console.log(shortID);
    const shortURL = `http://localhost:8000/${shortID}`;
    const result = await URLModel.create({
      originalURl: url,
      shortID: shortID,
      shortURL: shortURL,
    });

    const embed = new EmbedBuilder()
      .setTitle("🔗 Shortened URL")
      .addFields(
        { name: "Original URL", value: url },
        { name: "Shortened", value: shortURL }
      )
      .setColor("#908db9")
      .setFooter({ text: "Generated by Kaushal_Bot00" })
      .setAuthor({
        name: interaction.user.username,
        iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
      });

    interaction.reply({ embeds: [embed] });

    // interaction.reply(`Shortened URL: ${shortURL}`);
  }
});

client2.on("interactionCreate", async (interaction) => {
  let question = interaction.options.getString("question");

  // making the prompt more specific
  question +=
    "\n(Respond in less than 1800 characters. " +
    "Use short explanations. " +
    "Add some linespaces for more readablity" +
    "Format all codes(if any) properly within triple backticks. " +
    "Avoid unnecessary lines. Keep it compact and Discord-friendly.)";

  console.log(question);
  try {
    await interaction.deferReply(); // prevents timeouts

    // getting response from gemini
    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash-001",
      contents: question,
    });

    // making response safe for discord
    const reply = response.text;
    const safeReply =
      reply.length > 1990
        ? "❗ Response too long to send in Discord!"
        : "```\n" + reply.replace(/```/g, "'''") + "\n```";
    await interaction.editReply(safeReply);
  } catch (err) {
    console.log("Gemini Error: " + err);
    await interaction.editReply("❌ Oops! Failed to get a response.");
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

app.get("/", (req, res) => {
  return res.send("Hello from Express!");
});

app.get("/:shortID", async (req, res) => {
  const shortID = req.params.shortID;
  const url = await URLModel.findOne({ shortID: shortID });
  if (!url) return res.status(404).send("URL not found");
  return res.redirect(url.originalURl);
});

client1.login(process.env.DISCORD_TOKEN_BOT1);
client2.login(process.env.DISCORD_TOKEN_BOT2);
